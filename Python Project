import hashlib
import time

class Block:
    def __init__(self, index, previous_hash, timestamp, data, hash):
        self.index = index
        self.previous_hash = previous_hash
        self.timestamp = timestamp
        self.data = data
        self.hash = hash

def calculate_hash(index, previous_hash, timestamp, data, nonce=0):
    record = str(index) + str(previous_hash) + str(timestamp) + str(data) + str(nonce)
    sha = hashlib.sha256()
    sha.update(record.encode('utf-8'))
    return sha.hexdigest()

def create_genesis_block():
    return Block(0, "0", int(time.time()), "Genesis Block", calculate_hash(0, "0", int(time.time()), "Genesis Block"))

def get_last_block(blockchain):
    return blockchain[-1]

def add_block(blockchain, data):
    previous_block = get_last_block(blockchain)
    index = previous_block.index + 1
    timestamp = int(time.time())
    hash = calculate_hash(index, previous_block.previous_hash, timestamp, data)
    block = Block(index, previous_block.previous_hash, timestamp, data, hash)
    blockchain.append(block)

# Create the blockchain and add the genesis block
blockchain = [create_genesis_block()]

# How many blocks should we add to the chain
# after the genesis block
num_blocks_to_add = 10

# Add blocks to the chain
for i in range(0, num_blocks_to_add):
    log.info("Mining block #{}".format(i+1))
    add_block(blockchain, "Block reward for miner of block #{}".format(i+1))

# Print the blockchain
for block in blockchain:
    log.info("Outputting block {}".format(block.index))
    log.info("Hash: {}".format(block.hash))
    log.info("Previous hash: {}".format(block.previous_hash))
    log.info("Data: {}\n".format(block.data))
